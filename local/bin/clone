#!/bin/zsh
set -e

usage () {
  cat <<EOS
Clone a Git repository.

Usage: clone [options] <remote>

Options:
  -i --init     Install dependencies.
  -c --cache    Cache the repository.
  -s --shallow  Create a shallow clone.
  -h --help     Show help.
EOS
}

positional_arguments=()
while test $# != 0; do
  case "$1" in
  -c | --init) init_flag=t ;;
  -c | --cache) cache_flag=t ;;
  -s | --shallow) shallow_flag=t ;;
  -*) usage ; exit 1 ;;
  *) positional_arguments+=("$1") ;;
  esac
  shift
done
set -- "${positional_arguments[@]}"

echo $positional_arguments

remote="$1"
if [ -z "$remote" ]; then
  usage
  exit 1
fi

slug=$(echo -n "$remote" | cut -f 2 -d ':')
base=$(basename "$slug")
clone="$WORKSPACE/$base"

if [ -d "$clone" ]; then
  echo "$clone already exists."
  exit 1
fi

cached="$HOME/.git-cache/$slug"

function copy_cached {
  echo "Cloning from cache."
  git clone ${shallow_flag+--depth=1} --reference "$cached" "$remote" "$clone"
}

if [ -d "$cached" ]; then
  echo "Updating cache."
  (
    cd "$cached"
    git fetch origin
  )
  copy_cached
elif [ -n "$cache_flag" ]; then
  echo "Caching."
  git clone --bare --mirror "$remote" "$cached"
  copy_cached
else
  git clone ${shallow_flag+--depth 1} "$remote" "$clone"
fi

echo "Cloned to $clone."
cd "$clone"

if [ -n "$init_flag" ]; then
  echo "Initializing."
  if [ -f package-lock.json ]; then
    npm ci
  elif [ -f package.json ]; then
    npm install
  elif [ -f Gemfile ]; then
    bundler install
  fi
fi

head="$(git rev-parse --abbrev-ref HEAD)"
if [ "$head" = "master" ]; then
  command -v banner 2>/dev/null && banner "master!"
  command -v fallingtone 2>/dev/null && fallingtone
fi

if [ -f .gitmodules ]; then
  git submodule update --init --recursive || echo "error initializing submodules"
fi

gitinstallhooks || echo "error installing hooks"
git grep "TODO" || echo "No TODOs"
