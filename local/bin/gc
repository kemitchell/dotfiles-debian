#!/usr/bin/zsh
function usage {
  cat <<EOS
Interactively select and clone a Git repository.

Usage: gc [options]

Options:
  -c --cache      Cache the repository.
  -r --refresh    Refresh the remote cache.
  -h --help       Show help.
EOS
}

while test $# != 0; do
  case "$1" in
  -r | --refresh) refresh_flag=t ;;
  -c | --cache) cache_flag=t ;;
  -h | --help) usage ; exit ;;
  *)  usage ; exit 1 ;;
  esac
  shift
done

GITHUB_REMOTES="$HOME/.github-my-repos"
OTHER_REMOTES="$HOME/.git-my-repos"
if [ -n "$refresh_flag" ]; then
  updategithubcache
fi

remote=$((cat "$GITHUB_REMOTES" | awk '{print "git@github.com:" $1}' ; cat "$OTHER_REMOTES") | fzf)
if [ -z "$remote" ]; then
  exit 1
fi

slug=$(echo -n "$remote" | cut -f 2 -d ':')
base=$(basename "$slug")
clone="$WORKSPACE/$base"

if [ -d "$clone" ]; then
  echo "$clone already exists."
  exit 1
fi

REPO_CACHE="$HOME/.git-cache"
cached="$REPO_CACHE/$slug"
function copy_cached {
  echo "Cloning from cache."
  git clone --reference "$cached" "$remote" "$clone"
}

if [ -d "$cached" ]; then
  echo "Updating cache."
  (
    cd "$cached"
    git fetch origin
    git merge --ff-only origin
  )
  copy_cached
elif [ -n "$cache_flag" ]; then
  echo "Caching."
  git clone --mirror "$remote" "$cached"
  copy_cached
else
  git clone "$remote" "$clone"
fi

(
  cd "$clone"
  git submodule update --init --recursive
  gitinstallhooks
  git grep "TODO"
)
